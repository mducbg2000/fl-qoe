archetype federated(admin : address, const firstModel: string)

variable minAccept : nat = 1
variable minReject : nat = 1

asset verifier identified by id {
    id : address
}

asset model identified by hash {
    hash : string;
    uploader : address;
    upvote : nat = 0;
    downvote : nat = 0;
    accepted : bool = false;
    voters : aggregate<verifier> = [];
}

entry upload(ipfsAddress: string) {
    fail if {
        f0: model.contains(ipfsAddress) with "Model exist"
    }

    effect {
        model.add({
            hash = ipfsAddress;
            uploader = caller
        })
    }
}

entry vote(ipfsAddress: string, accept: bool) {
    called by verifier or admin otherwise "You are not authorized to vote"

    fail if {
        f1: model.contains(ipfsAddress) = false with "Model doesn't exist"; 
        f2: model[ipfsAddress].accepted with "Model is accepted and don't need more vote";
        f3: model[ipfsAddress].voters.contains(caller) with "You voted that model"
    }

    effect {
        const up = accept ? 1 : 0;
        const down = accept ? 0 : 1;

        model[ipfsAddress].upvote += up;
        model[ipfsAddress].downvote += down;
        model[ipfsAddress].voters.add(caller);

        if (model[ipfsAddress]).upvote >= minAccept then model[ipfsAddress].accepted := true;
        if (model[ipfsAddress]).downvote >= minReject then model.remove(ipfsAddress); 
    }
}

entry addVerifiers(addresses: list<address>) {
    called by admin otherwise "Only admin can add new verifiers"

    effect {
        for a in addresses do
            verifier.put({id = a})
        done;    
        // verifier.count() is always natural value so expression in abs functions is always positive int value
        const total = verifier.count();
        minAccept := abs(ceil(total * 2 / 3));
        minReject := abs(total - minAccept);
    }
}

